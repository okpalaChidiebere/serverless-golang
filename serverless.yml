# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-golang
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-plugin-canary-deployments

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
        # Allow our function to generate a correct presignedURL
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"
        - Effect: Allow # allow our app to read the secret value from our AWS secretManager
          Action:
            - secretsmanager:GetSecretValue
          Resource: !Ref AwsUserSecretCredentials
        - Effect: Allow #allow our app to use the KMSKey to decrypet the secret value
          Action:
            - kms:Decrypt
          Resource: !GetAtt KMSKey.Arn
        - Effect: Allow # canary deployment uses AWS CodeDeploy so we have to give permissions
          Action:
            - codedeploy:*
          Resource:
            - '*'
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    IMAGES_S3_BUCKET: sls-udagram-images-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage} #this table will sotre our list of connections
    THUMBNAILS_S3_BUCKET: sls-udagram-thumbnail-${self:provider.stage}
    AWS_APP_USER_SECRET_ID: Aws-app-user-credentials-${self:provider.stage} # the name of the new AWS resource that will store our secret values

#we can use values from this custom section in other parts of our config file as well
custom:
  topicName: imagesTopic-${self:provider.stage} # the name for our SNS topic. We defined this value here instead of as environment variable because we dont need to pass it to Lambda functions

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  Auth:
    handler: bin/auth0Authorizer
  hello:
    handler: bin/hello
    events:
      - httpApi:
          path: /hello
          method: get
  world:
    handler: bin/world
    events:
      - httpApi:
          path: /world
          method: get
  GetGroups:
    handler: bin/src/lambda/http/getGroups
    events:
      - http:
          method: get
          path: groups
          cors: true
  CreateGroup:
    handler: bin/src/lambda/http/createGroup
    events:
      - http:
          method: post
          path: groups
          cors: true # properly reply to cores preFligh Request
          authorizer: Auth
          request:
            # schema used to validae incoming request
            schemas:
              application/json: 
                schema: ${file(models/create-group-request.json)} # we read the definition of the schema from the models folder then the json file name
                name: GroupRequest
                description: Create a new group
    deploymentSettings:  # more settings here https://www.serverless.com/plugins/serverless-plugin-canary-deployments
      type: Linear10PercentEvery1Minute
      alias: Live
  GetImages:
    handler: bin/getImages
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true
  GetImage:
    handler: bin/getImage
    events:
      - http:
          method: get
          path: images/{imageId}
          cors: true
  CreateImage:
    handler: bin/createImage
    events:
      - http:
          method: post
          path: groups/{groupId}/images
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: 
                schema: ${file(models/create-image-request.json)}
                name: ImageRequest
                description: Create a new image
  SendUploadNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: bin/sendNotifications
    events:
      - sns: # we now process events from SNS instead of S3 like we had.
          arn:
            Fn::Join: #we provice the arn of an SNS topic using the join function
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName} # the name of the topic this lambda is subscribed to
  ConnectHandler:
    handler: bin/connect
    events:
      - websocket:
          route: $connect
  DisconnectHandler:
    handler: bin/disconnect
    events:
      - websocket:
          route: $disconnect
  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
    handler: bin/elasticSearchSync
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ImagesDynamoDBTable.StreamArn # we are using the getAttribute function from cloud formation
  ResizeImage:
    handler: bin/resizeImage
    events: # connect this Lambda function to an SNS
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    GatewayResponseDefault4XX: # we need to set correct cors headers if our custom authorizer denies access to any functions
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    ImagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions: #attributes listed here are required in order to create a new it in this table
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE #we want each record in the stream to contain the updated version of an item
        TableName: ${self:provider.environment.IMAGES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
            - AttributeName: imageId
              KeyType: HASH
            Projection:
              ProjectionType: ALL #we what all the attributes to be copied over from the original table to this index table
    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration: # Now, all events from this Bucket will be sent to the "ImagesTopic" that we defined instead of straight to a Lambda function that we had previously
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration: #it allows for our bucket to set the right cors headers when a request is sent to our S3 Bucket
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # this policy allows anybody to read Objects from our S3 bucket
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*' # anyone
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket #we specify that our "AttachmentsBucket" has this policy
    SNSTopicPolicy: # this policy allows ONLY our S3 Bucket to send events to the ImagesTopic
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic
    # we provide an SNS Topic
    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic # a huma readable name for this topic
        TopicName: ${self:custom.topicName} # the actual topic name we get from the custom section of this sls yml file
    #NOTE: this ES is not production ready. This is good for testing or demo
    ImagesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions: #Elastic Block Store: This defines storage available for our cluster nodes
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
        # Required: Enable fine-grained access control or apply a restrictive access policy to our ES domain
        #https://aws.amazon.com/premiumsupport/knowledge-center/anonymous-not-authorized-elasticsearch/
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'
              Condition: 
                IpAddress:
                  aws:SourceIP:
                    -
                      '70.64.120.73' # allow only request from my home public wifi ip address access to kibana UI
    #KMSKey used to encrypt our secret
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt AWS user credentials secrets
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS: # we give our root user access to this kms key
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'
    #KMSAlias is human readable name for our key
    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/Aws-app-user-credentials-key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey
    #This is where we will store our user credentials secret
    AwsUserSecretCredentials:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AWS_APP_USER_SECRET_ID}
        Description: User Credentials Secret. We can get this secret and then sign a http request in our app when we have to
        KmsKeyId: !Ref KMSKey # we specified that to encrypt the value stored in this secret, it should used the KMSKey resource we created
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
